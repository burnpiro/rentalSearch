(function () {
    angular.module('RentalSearchApp', [
        'ui.router', 'ngMaterial', 'ngMdIcons', 'rental-services'
    ])
})();
(function () {
    angular.module('RentalSearchApp')
        .config(function ($stateProvider, $urlRouterProvider, $mdThemingProvider) {
            $urlRouterProvider.otherwise('/');
            $stateProvider
                .state('home', {
                    name: 'dashboard',
                    url: '/',
                    controller: 'DashboardController',
                    templateUrl: 'views/dashboard/dashboardView.html'
                })
                .state('settings', {
                    name: 'settings',
                    url: '/settings',
                    controller: 'SettingsController',
                    templateUrl: 'views/settings/settingsView.html'
                });
            $mdThemingProvider.theme('altTheme')
                .primaryPalette('green')
                .accentPalette('light-blue');
            $mdThemingProvider.setDefaultTheme('altTheme');
        });
})();
(function () {
    angular.module('RentalSearchApp')

        .controller('DashboardController', ['$scope', '$rootScope',
            function($scope, $rootScope) {
                $scope.list = {
                    higher: 0
                };
                $scope.items = [];
                $rootScope.selectedTab = 0;
                $scope.selection = 'default';

                chrome.runtime.sendMessage({get: 'list'}, function(response) {
                    $scope.items = response;
                    // needs to be called because after response is received view is already rendered and have empty array
                    $scope.$apply();
                });

                $scope.changeSeen = function(hashId, type) {
                    chrome.runtime.sendMessage({seen: hashId, set:'seen', type: type}, function() {
                        //no response needed
                    });
                };
            }
        ]);
})();
(function () {
    angular.module('RentalSearchApp')

        .controller('SettingsController', ['$scope', 'LinkService',
            function($scope, LinkService) {
                var self = this;
                self.settings = {
                    interval: 1,
                    olxLink: 'http://olx.pl/nieruchomosci/mieszkania/wynajem/',
                    gumtreeLink: 'http://www.gumtree.pl/fp-mieszkania-i-domy-do-wynajecia/c9008',
                    advanced: false
                };
                self.items = [];

                chrome.runtime.sendMessage({get: 'settings'}, function(response) {
                    if(response.advanced) {
                        response.gumtreeLink = LinkService.prepareGumtreeLink(response.gumtreeLink);
                    }
                    self.settings = response;

                    // needs to be called because after response is received view is already rendered and have empty array
                    $scope.$apply();
                });

                self.saveSettings = function() {
                    var requestData = _.clone(self.settings);
                    if(self.settings.advanced) {
                        requestData.gumtreeLink = LinkService.generateGumtreeLink(self.settings.gumtreeLink);
                    }
                    chrome.runtime.sendMessage({settings: requestData, set:'settings'}, function() {
                    });
                };

                self.querySearch = function(query) {
                    var results = query ? LinkService.searchLocationByName(query) : [];
                    return results;
                };

            }
        ]);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAucm91dGUuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkQ29udHJvbGxlci5qcyIsInNldHRpbmdzL3NldHRpbmdzQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoJ1JlbnRhbFNlYXJjaEFwcCcsIFtcbiAgICAgICAgJ3VpLnJvdXRlcicsICduZ01hdGVyaWFsJywgJ25nTWRJY29ucycsICdyZW50YWwtc2VydmljZXMnXG4gICAgXSlcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFyLm1vZHVsZSgnUmVudGFsU2VhcmNoQXBwJylcbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG4gICAgICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnaG9tZScsIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Rhc2hib2FyZCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGFzaGJvYXJkL2Rhc2hib2FyZFZpZXcuaHRtbCdcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnc2V0dGluZ3MnLCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzZXR0aW5ncycsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9zZXR0aW5ncycsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZXR0aW5nc0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3NldHRpbmdzL3NldHRpbmdzVmlldy5odG1sJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdhbHRUaGVtZScpXG4gICAgICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdncmVlbicpXG4gICAgICAgICAgICAgICAgLmFjY2VudFBhbGV0dGUoJ2xpZ2h0LWJsdWUnKTtcbiAgICAgICAgICAgICRtZFRoZW1pbmdQcm92aWRlci5zZXREZWZhdWx0VGhlbWUoJ2FsdFRoZW1lJyk7XG4gICAgICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKCdSZW50YWxTZWFyY2hBcHAnKVxuXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXNoYm9hcmRDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsXG4gICAgICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRyb290U2NvcGUpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGlnaGVyOiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlbGVjdGVkVGFiID0gMDtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0aW9uID0gJ2RlZmF1bHQnO1xuXG4gICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe2dldDogJ2xpc3QnfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLml0ZW1zID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWRzIHRvIGJlIGNhbGxlZCBiZWNhdXNlIGFmdGVyIHJlc3BvbnNlIGlzIHJlY2VpdmVkIHZpZXcgaXMgYWxyZWFkeSByZW5kZXJlZCBhbmQgaGF2ZSBlbXB0eSBhcnJheVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlU2VlbiA9IGZ1bmN0aW9uKGhhc2hJZCwgdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7c2VlbjogaGFzaElkLCBzZXQ6J3NlZW4nLCB0eXBlOiB0eXBlfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vIHJlc3BvbnNlIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFyLm1vZHVsZSgnUmVudGFsU2VhcmNoQXBwJylcblxuICAgICAgICAuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyJywgWyckc2NvcGUnLCAnTGlua1NlcnZpY2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCBMaW5rU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZWxmLnNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogMSxcbiAgICAgICAgICAgICAgICAgICAgb2x4TGluazogJ2h0dHA6Ly9vbHgucGwvbmllcnVjaG9tb3NjaS9taWVzemthbmlhL3d5bmFqZW0vJyxcbiAgICAgICAgICAgICAgICAgICAgZ3VtdHJlZUxpbms6ICdodHRwOi8vd3d3Lmd1bXRyZWUucGwvZnAtbWllc3prYW5pYS1pLWRvbXktZG8td3luYWplY2lhL2M5MDA4JyxcbiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZWxmLml0ZW1zID0gW107XG5cbiAgICAgICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7Z2V0OiAnc2V0dGluZ3MnfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzcG9uc2UuYWR2YW5jZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmd1bXRyZWVMaW5rID0gTGlua1NlcnZpY2UucHJlcGFyZUd1bXRyZWVMaW5rKHJlc3BvbnNlLmd1bXRyZWVMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldHRpbmdzID0gcmVzcG9uc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZHMgdG8gYmUgY2FsbGVkIGJlY2F1c2UgYWZ0ZXIgcmVzcG9uc2UgaXMgcmVjZWl2ZWQgdmlldyBpcyBhbHJlYWR5IHJlbmRlcmVkIGFuZCBoYXZlIGVtcHR5IGFycmF5XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZVNldHRpbmdzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IF8uY2xvbmUoc2VsZi5zZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuc2V0dGluZ3MuYWR2YW5jZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLmd1bXRyZWVMaW5rID0gTGlua1NlcnZpY2UuZ2VuZXJhdGVHdW10cmVlTGluayhzZWxmLnNldHRpbmdzLmd1bXRyZWVMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7c2V0dGluZ3M6IHJlcXVlc3REYXRhLCBzZXQ6J3NldHRpbmdzJ30sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc2VsZi5xdWVyeVNlYXJjaCA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gcXVlcnkgPyBMaW5rU2VydmljZS5zZWFyY2hMb2NhdGlvbkJ5TmFtZShxdWVyeSkgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9