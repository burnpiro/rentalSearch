(function () {
    angular.module('RentalSearchApp', [
        'ui.router', 'ngMaterial', 'ngMdIcons', 'rental-services'
    ])
})();
(function () {
    angular.module('RentalSearchApp')
        .config(function ($stateProvider, $urlRouterProvider, $mdThemingProvider) {
            $urlRouterProvider.otherwise('/');
            $stateProvider
                .state('home', {
                    name: 'dashboard',
                    url: '/',
                    controller: 'DashboardController',
                    templateUrl: 'views/dashboard/dashboardView.html'
                })
                .state('settings', {
                    name: 'settings',
                    url: '/settings',
                    controller: 'SettingsController',
                    templateUrl: 'views/settings/settingsView.html'
                });
            $mdThemingProvider.theme('altTheme')
                .primaryPalette('green')
                .accentPalette('light-blue');
            $mdThemingProvider.setDefaultTheme('altTheme');
        });
})();
(function () {
    angular.module('RentalSearchApp')

        .controller('DashboardController', ['$scope', '$rootScope',
            function($scope, $rootScope) {
                $scope.list = {
                    higher: 0
                };
                $scope.items = [];
                $rootScope.selectedTab = 0;
                $scope.selection = 'default';

                chrome.runtime.sendMessage({get: 'list'}, function(response) {
                    $scope.items = response;
                    // needs to be called because after response is received view is already rendered and have empty array
                    $scope.$apply();
                });

                $scope.changeSeen = function(hashId, type) {
                    chrome.runtime.sendMessage({seen: hashId, set:'seen', type: type}, function() {
                        //no response needed
                    });
                };
            }
        ]);
})();
(function () {
    angular.module('RentalSearchApp')

        .controller('SettingsController', ['$scope', 'LinkService',
            function($scope, LinkService) {
                var self = this;
                self.settings = {
                    interval: 1,
                    olxLink: 'http://olx.pl/nieruchomosci/mieszkania/wynajem/',
                    gumtreeLink: 'http://www.gumtree.pl/fp-mieszkania-i-domy-do-wynajecia/c9008',
                    advanced: false,
                    automaticallyMarkAsSeen: false
                };
                self.items = [];

                chrome.runtime.sendMessage({get: 'settings'}, function(response) {
                    self.settings = response;
                    if(response.advanced) {
                        self.settings.gumtreeLink = response.gumtreeLinkOriginal;
                    }

                    // needs to be called because after response is received view is already rendered and have empty array
                    $scope.$apply();
                });

                self.saveSettings = function() {
                    var requestData = _.clone(self.settings);
                    if(self.settings.advanced) {
                        requestData.gumtreeLink = LinkService.generateGumtreeLink(self.settings.gumtreeLink);
                        requestData.gumtreeLinkOriginal = self.settings.gumtreeLink;
                    }
                    chrome.runtime.sendMessage({settings: requestData, set:'settings'}, function() {
                    });
                };

                self.querySearch = function(query) {
                    var results = query ? LinkService.searchLocationByName(query) : [];
                    return results;
                };

            }
        ]);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAucm91dGUuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkQ29udHJvbGxlci5qcyIsInNldHRpbmdzL3NldHRpbmdzQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKCdSZW50YWxTZWFyY2hBcHAnLCBbXG4gICAgICAgICd1aS5yb3V0ZXInLCAnbmdNYXRlcmlhbCcsICduZ01kSWNvbnMnLCAncmVudGFsLXNlcnZpY2VzJ1xuICAgIF0pXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoJ1JlbnRhbFNlYXJjaEFwcCcpXG4gICAgICAgIC5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRtZFRoZW1pbmdQcm92aWRlcikge1xuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2hvbWUnLCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkYXNoYm9hcmQnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rhc2hib2FyZENvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2Rhc2hib2FyZC9kYXNoYm9hcmRWaWV3Lmh0bWwnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ3NldHRpbmdzJywge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc2V0dGluZ3MnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvc2V0dGluZ3MnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU2V0dGluZ3NDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9zZXR0aW5ncy9zZXR0aW5nc1ZpZXcuaHRtbCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnYWx0VGhlbWUnKVxuICAgICAgICAgICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgnZ3JlZW4nKVxuICAgICAgICAgICAgICAgIC5hY2NlbnRQYWxldHRlKCdsaWdodC1ibHVlJyk7XG4gICAgICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuc2V0RGVmYXVsdFRoZW1lKCdhbHRUaGVtZScpO1xuICAgICAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFyLm1vZHVsZSgnUmVudGFsU2VhcmNoQXBwJylcblxuICAgICAgICAuY29udHJvbGxlcignRGFzaGJvYXJkQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLFxuICAgICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSB7XG4gICAgICAgICAgICAgICAgICAgIGhpZ2hlcjogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJHNjb3BlLml0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zZWxlY3RlZFRhYiA9IDA7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGlvbiA9ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtnZXQ6ICdsaXN0J30sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pdGVtcyA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkcyB0byBiZSBjYWxsZWQgYmVjYXVzZSBhZnRlciByZXNwb25zZSBpcyByZWNlaXZlZCB2aWV3IGlzIGFscmVhZHkgcmVuZGVyZWQgYW5kIGhhdmUgZW1wdHkgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZVNlZW4gPSBmdW5jdGlvbihoYXNoSWQsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe3NlZW46IGhhc2hJZCwgc2V0OidzZWVuJywgdHlwZTogdHlwZX0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9ubyByZXNwb25zZSBuZWVkZWRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoJ1JlbnRhbFNlYXJjaEFwcCcpXG5cbiAgICAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ0xpbmtTZXJ2aWNlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgTGlua1NlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJ2YWw6IDEsXG4gICAgICAgICAgICAgICAgICAgIG9seExpbms6ICdodHRwOi8vb2x4LnBsL25pZXJ1Y2hvbW9zY2kvbWllc3prYW5pYS93eW5hamVtLycsXG4gICAgICAgICAgICAgICAgICAgIGd1bXRyZWVMaW5rOiAnaHR0cDovL3d3dy5ndW10cmVlLnBsL2ZwLW1pZXN6a2FuaWEtaS1kb215LWRvLXd5bmFqZWNpYS9jOTAwOCcsXG4gICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b21hdGljYWxseU1hcmtBc1NlZW46IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZWxmLml0ZW1zID0gW107XG5cbiAgICAgICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7Z2V0OiAnc2V0dGluZ3MnfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXR0aW5ncyA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5hZHZhbmNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXR0aW5ncy5ndW10cmVlTGluayA9IHJlc3BvbnNlLmd1bXRyZWVMaW5rT3JpZ2luYWw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkcyB0byBiZSBjYWxsZWQgYmVjYXVzZSBhZnRlciByZXNwb25zZSBpcyByZWNlaXZlZCB2aWV3IGlzIGFscmVhZHkgcmVuZGVyZWQgYW5kIGhhdmUgZW1wdHkgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5zYXZlU2V0dGluZ3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3REYXRhID0gXy5jbG9uZShzZWxmLnNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5zZXR0aW5ncy5hZHZhbmNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdERhdGEuZ3VtdHJlZUxpbmsgPSBMaW5rU2VydmljZS5nZW5lcmF0ZUd1bXRyZWVMaW5rKHNlbGYuc2V0dGluZ3MuZ3VtdHJlZUxpbmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdERhdGEuZ3VtdHJlZUxpbmtPcmlnaW5hbCA9IHNlbGYuc2V0dGluZ3MuZ3VtdHJlZUxpbms7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe3NldHRpbmdzOiByZXF1ZXN0RGF0YSwgc2V0OidzZXR0aW5ncyd9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHNlbGYucXVlcnlTZWFyY2ggPSBmdW5jdGlvbihxdWVyeSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IHF1ZXJ5ID8gTGlua1NlcnZpY2Uuc2VhcmNoTG9jYXRpb25CeU5hbWUocXVlcnkpIDogW107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==