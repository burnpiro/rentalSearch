(function () {
    angular.module('RentalSearchApp', [
        'ui.router', 'ngMaterial', 'ngMdIcons', 'rental-services'
    ])
})();
(function () {
    angular.module('RentalSearchApp')
        .config(function ($stateProvider, $urlRouterProvider, $mdThemingProvider) {
            $urlRouterProvider.otherwise('/');
            $stateProvider
                .state('home', {
                    name: 'dashboard',
                    url: '/',
                    controller: 'DashboardController',
                    templateUrl: 'views/dashboard/dashboardView.html'
                })
                .state('settings', {
                    name: 'settings',
                    url: '/settings',
                    controller: 'SettingsController',
                    templateUrl: 'views/settings/settingsView.html'
                });
            $mdThemingProvider.theme('altTheme')
                .primaryPalette('green')
                .accentPalette('light-blue');
            $mdThemingProvider.setDefaultTheme('altTheme');
        });
})();
(function () {
    angular.module('RentalSearchApp')

        .controller('DashboardController', ['$scope', '$rootScope',
            function($scope, $rootScope) {
                var self = this;
                self.list = {
                    higher: 0
                };
                self.seen = {
                    olx: false,
                    gumtree: false
                };
                self.items = [];
                $rootScope.selectedTab = 0;
                self.selection = 'default';

                chrome.runtime.sendMessage({get: 'list'}, function(response) {
                    self.items = response;
                    // needs to be called because after response is received view is already rendered and have empty array
                    $scope.$apply();
                });

                self.changeSeen = function(hashId, type) {
                    chrome.runtime.sendMessage({seen: hashId, set:'seen', type: type}, function() {
                        //no response needed
                    });
                };

                self.markAllAsSeen = function(type) {
                    chrome.runtime.sendMessage({set:'allSeen', type: type}, function() {
                        //no response needed
                    });
                    _.forEach(self.items, function(item) {
                        if(item.type === type) {
                            item.seen = true;
                        }
                    })
                };
            }
        ]);
})();
(function () {
    angular.module('RentalSearchApp')

        .controller('SettingsController', ['$scope', 'LinkService',
            function($scope, LinkService) {
                var self = this;
                self.settings = {
                    interval: 1,
                    olxLink: 'http://olx.pl/nieruchomosci/mieszkania/wynajem/',
                    gumtreeLink: 'http://www.gumtree.pl/fp-mieszkania-i-domy-do-wynajecia/c9008',
                    advanced: false,
                    automaticallyMarkAsSeen: false
                };
                self.items = [];

                chrome.runtime.sendMessage({get: 'settings'}, function(response) {
                    self.settings = response;
                    if(response.advanced) {
                        self.settings.gumtreeLink = response.gumtreeLinkOriginal;
                    }

                    // needs to be called because after response is received view is already rendered and have empty array
                    $scope.$apply();
                });

                self.saveSettings = function() {
                    var requestData = _.clone(self.settings);
                    if(self.settings.advanced) {
                        requestData.gumtreeLink = LinkService.generateGumtreeLink(self.settings.gumtreeLink);
                        requestData.gumtreeLinkOriginal = self.settings.gumtreeLink;
                    }
                    chrome.runtime.sendMessage({settings: requestData, set:'settings'}, function() {
                    });
                };

                self.querySearch = function(query) {
                    var results = query ? LinkService.searchLocationByName(query) : [];
                    return results;
                };

            }
        ]);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAucm91dGUuanMiLCJkYXNoYm9hcmQvZGFzaGJvYXJkQ29udHJvbGxlci5qcyIsInNldHRpbmdzL3NldHRpbmdzQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoJ1JlbnRhbFNlYXJjaEFwcCcsIFtcbiAgICAgICAgJ3VpLnJvdXRlcicsICduZ01hdGVyaWFsJywgJ25nTWRJY29ucycsICdyZW50YWwtc2VydmljZXMnXG4gICAgXSlcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICBhbmd1bGFyLm1vZHVsZSgnUmVudGFsU2VhcmNoQXBwJylcbiAgICAgICAgLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG4gICAgICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnaG9tZScsIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Rhc2hib2FyZCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvZGFzaGJvYXJkL2Rhc2hib2FyZFZpZXcuaHRtbCdcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnc2V0dGluZ3MnLCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzZXR0aW5ncycsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9zZXR0aW5ncycsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTZXR0aW5nc0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3NldHRpbmdzL3NldHRpbmdzVmlldy5odG1sJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdhbHRUaGVtZScpXG4gICAgICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdncmVlbicpXG4gICAgICAgICAgICAgICAgLmFjY2VudFBhbGV0dGUoJ2xpZ2h0LWJsdWUnKTtcbiAgICAgICAgICAgICRtZFRoZW1pbmdQcm92aWRlci5zZXREZWZhdWx0VGhlbWUoJ2FsdFRoZW1lJyk7XG4gICAgICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKCdSZW50YWxTZWFyY2hBcHAnKVxuXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXNoYm9hcmRDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsXG4gICAgICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRyb290U2NvcGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgc2VsZi5saXN0ID0ge1xuICAgICAgICAgICAgICAgICAgICBoaWdoZXI6IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNlbGYuc2VlbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgb2x4OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZ3VtdHJlZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHNlbGYuaXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlbGVjdGVkVGFiID0gMDtcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGlvbiA9ICdkZWZhdWx0JztcblxuICAgICAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtnZXQ6ICdsaXN0J30sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaXRlbXMgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZHMgdG8gYmUgY2FsbGVkIGJlY2F1c2UgYWZ0ZXIgcmVzcG9uc2UgaXMgcmVjZWl2ZWQgdmlldyBpcyBhbHJlYWR5IHJlbmRlcmVkIGFuZCBoYXZlIGVtcHR5IGFycmF5XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNlbGYuY2hhbmdlU2VlbiA9IGZ1bmN0aW9uKGhhc2hJZCwgdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7c2VlbjogaGFzaElkLCBzZXQ6J3NlZW4nLCB0eXBlOiB0eXBlfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vIHJlc3BvbnNlIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc2VsZi5tYXJrQWxsQXNTZWVuID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7c2V0OidhbGxTZWVuJywgdHlwZTogdHlwZX0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9ubyByZXNwb25zZSBuZWVkZWRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChzZWxmLml0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgIGFuZ3VsYXIubW9kdWxlKCdSZW50YWxTZWFyY2hBcHAnKVxuXG4gICAgICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXInLCBbJyRzY29wZScsICdMaW5rU2VydmljZScsXG4gICAgICAgICAgICBmdW5jdGlvbigkc2NvcGUsIExpbmtTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHNlbGYuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIGludGVydmFsOiAxLFxuICAgICAgICAgICAgICAgICAgICBvbHhMaW5rOiAnaHR0cDovL29seC5wbC9uaWVydWNob21vc2NpL21pZXN6a2FuaWEvd3luYWplbS8nLFxuICAgICAgICAgICAgICAgICAgICBndW10cmVlTGluazogJ2h0dHA6Ly93d3cuZ3VtdHJlZS5wbC9mcC1taWVzemthbmlhLWktZG9teS1kby13eW5hamVjaWEvYzkwMDgnLFxuICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9tYXRpY2FsbHlNYXJrQXNTZWVuOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgc2VsZi5pdGVtcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe2dldDogJ3NldHRpbmdzJ30sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0dGluZ3MgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzcG9uc2UuYWR2YW5jZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0dGluZ3MuZ3VtdHJlZUxpbmsgPSByZXNwb25zZS5ndW10cmVlTGlua09yaWdpbmFsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZHMgdG8gYmUgY2FsbGVkIGJlY2F1c2UgYWZ0ZXIgcmVzcG9uc2UgaXMgcmVjZWl2ZWQgdmlldyBpcyBhbHJlYWR5IHJlbmRlcmVkIGFuZCBoYXZlIGVtcHR5IGFycmF5XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNlbGYuc2F2ZVNldHRpbmdzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0RGF0YSA9IF8uY2xvbmUoc2VsZi5zZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuc2V0dGluZ3MuYWR2YW5jZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLmd1bXRyZWVMaW5rID0gTGlua1NlcnZpY2UuZ2VuZXJhdGVHdW10cmVlTGluayhzZWxmLnNldHRpbmdzLmd1bXRyZWVMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3REYXRhLmd1bXRyZWVMaW5rT3JpZ2luYWwgPSBzZWxmLnNldHRpbmdzLmd1bXRyZWVMaW5rO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtzZXR0aW5nczogcmVxdWVzdERhdGEsIHNldDonc2V0dGluZ3MnfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzZWxmLnF1ZXJ5U2VhcmNoID0gZnVuY3Rpb24ocXVlcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSBxdWVyeSA/IExpbmtTZXJ2aWNlLnNlYXJjaExvY2F0aW9uQnlOYW1lKHF1ZXJ5KSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIF0pO1xufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=